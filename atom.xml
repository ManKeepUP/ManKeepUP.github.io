<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ManKeepUP</title>
  
  <subtitle>Man Always Keep Up!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mankeepup.github.io/"/>
  <updated>2020-02-22T14:09:31.276Z</updated>
  <id>https://mankeepup.github.io/</id>
  
  <author>
    <name>ManKeepUP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础知识</title>
    <link href="https://mankeepup.github.io/2020/02/22/Computer%20Language/Python/python%E5%9F%BA%E7%A1%80/"/>
    <id>https://mankeepup.github.io/2020/02/22/Computer%20Language/Python/python%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-22T03:32:00.000Z</published>
    <updated>2020-02-22T14:09:31.276Z</updated>
    
    <content type="html"><![CDATA[<p>这是《python编程·从入门到实践》一书的读书笔记，从这里开始了解关于python的基础知识，当然这也将是一份复习回顾的好材料…</p><a id="more"></a><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><div class="note info">            <p>“起步”章节主要是教我们搭建python环境，并开始用相应的工具来编写运行第一个程序——Hello World。  </p>          </div><div class="tabs" id="forth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#forth-unique-name-1">下载Python</a></li><li class="tab"><a href="#forth-unique-name-2">下载Geany</a></li></ul><div class="tab-content"><div class="tab-pane active" id="forth-unique-name-1"><p>访问网址<span class="exturl" data-url="aHR0cDovL3B5dGhvbi5vcmcvZG93bmxvYWRzLw==" title="http://python.org/downloads/">Python<i class="fa fa-external-link"></i></span>下载最新版本.</p></div><div class="tab-pane" id="forth-unique-name-2"><p>访问网址<span class="exturl" data-url="aHR0cDovL2dlYW55Lm9yZy8=" title="http://geany.org/">Geany<i class="fa fa-external-link"></i></span>下载最新版本.</p></div></div></div><blockquote><p>在Geany中运行python代码需要我们在Build选项中进行设置，这在书中的1.2.3小节中有提到，值得注意的是，编译命令处应该是你能够运行.py文件的一个命令，比如我的是python，那么久填为python -m py_compile “%f”。</p></blockquote><div class="note success">            <p>我们经常会在学习的任何阶段遇到问题，哪怕已经成为这个领域的专家，书中提到“离开计算机”、“推导重来”、“向他人求助”或许都是不错的方法，但有时却很需要勇气和智慧。</p>          </div><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><div class="note info">            <p>“试一试”环节类似于常见书籍中的思考题部分，通过它能够拓宽我们学习python的宽度。</p>          </div><p>&emsp;&emsp;<strong>1-1.python.org：</strong> 以前似乎没有静静看过一个计算机语言的官网，大致看了一下python的网站，上面的内容很丰富，学习python不同层次人群都能够在这里找到丰富的资料，我只是从一个新手的角度出发去看这个网址，在about-gettingstarted-learning(code samples)-<span class="exturl" data-url="aHR0cDovL3d3dy5lZmZib3Qub3JnL3pvbmUvbGlicmFyeWJvb2staW5kZXguaHRt" title="http://www.effbot.org/zone/librarybook-index.htm">The Python Standard Library<i class="fa fa-external-link"></i></span>这里我看到了python为新手提供的样例代码，是一份厚实的电子书籍，这份资料在1999年就开始编辑了。可见，python.org网址凝结了python所有工作人员无数的心血。另外，在主页上还有一个<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9qb2JzLw==" title="https://www.python.org/jobs/">Job<i class="fa fa-external-link"></i></span>连接，为我们提供了和python相关的工作信息，可以通过这里来了解职业需求是怎样的。  </p><p>&emsp;&emsp;<strong>1-2.输入错误：</strong> 随便输入一个字符串，比如：ManKeepUP，那么程序运行后将提示“ManKeepUP not defined”的错误。一个不会导致错误的输入错误？比如将print写成pint，然后我们在前面加一个#符号就不会报错了，因为#后面代码被注释了。  </p><p>&emsp;&emsp;<strong>1-3.无穷的技艺：</strong>学到知识后来尝试做下面的程序吧！</p><ul><li>游戏：用python做一个对抗游戏，他们可以放技能来一决高下，就像拳皇(<em>The king of Fighters</em>)那样，或许这个游戏的名字可以叫做<span class="label success">叶问</span>(<em>Ip Man</em>)。</li><li>安全：肯定要用python在安全领域发挥它的作用的，让我们来尝试用python编写一个端口扫描器的脚本吧。</li><li>爬虫：python与“爬虫”两个字似乎有着天然的联系，不妨用python去爬取一些你感兴趣的数据吧，但请记住<span class="label danger">一定要在法律许可的范围内进行！</span></li></ul><h2 id="变量和简单数据类型"><a href="#变量和简单数据类型" class="headerlink" title="变量和简单数据类型"></a>变量和简单数据类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>&emsp;&emsp;在python中我们不需要事先指定类型就可使用一个变量(这一点和其他编程语言不同，比如C)，变量存储了一个与它相关联的信息。</p><h3 id="命名和使用"><a href="#命名和使用" class="headerlink" title="命名和使用"></a>命名和使用</h3><ul><li>只能是字母、数字和下划线</li><li>只能以字母或下划线开头</li><li>不能含空格</li><li>不能是关键字</li></ul><div class="note danger">            <p>变量名应既简短又具有描述性，慎用小写字母l和大写字母O，变量名避免使用大写字母。</p>          </div><h3 id="动手试一试-1"><a href="#动手试一试-1" class="headerlink" title="动手试一试"></a>动手试一试</h3><p>&emsp;&emsp;<strong>2-1.简单消息：</strong> 用下面的代码通过变量打印一条消息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">news = <span class="string">"This is a new msg!"</span>  </span><br><span class="line">print(news)</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;<strong>2-2.多条简单消息：</strong> 用下面的代码打印多条消息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">news = <span class="string">"Good Morning."</span></span><br><span class="line">print(news)</span><br><span class="line">news = <span class="string">"Good Evening."</span></span><br><span class="line">print(news)</span><br></pre></td></tr></table></figure></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>&emsp;&emsp;字符串可以包裹在’’或””中。</p><h4 id="修改字符串大小写"><a href="#修改字符串大小写" class="headerlink" title="修改字符串大小写"></a>修改字符串大小写</h4><ul><li>title()：以首字母大写的方式显示每个单词</li><li>upper()：将字符串改为全部大写</li><li>lower()：将字符串改为全部小写</li></ul><h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><p>&emsp;&emsp;用’+’号来连接两个字符串。</p><h4 id="添加空白"><a href="#添加空白" class="headerlink" title="添加空白"></a>添加空白</h4><p>&emsp;&emsp;通过在字符串中添加换行符’\n’和制表符’\t’来添加空白。</p><h2 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h2><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><p>&emsp;&emsp;下面将尝试来对列表中的元素执行一些操作。</p><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><p>&emsp;&emsp;通过for循环语句来帮助我们遍历一个列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#magicians.py</span></span><br><span class="line">magicians = [<span class="string">'dengzihao'</span>,<span class="string">'bailu'</span>,<span class="string">'wangyuancan'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">print(magicians)</span><br></pre></td></tr></table></figure></p><blockquote><p>我们可以在for循环体中执行更多的语句，for语句后面且属于循环组成部分的代码行应该缩进，那些没有保持缩进的代码将不被认为在for循环体内。</p></blockquote><div class="note warning">            <p>for语句所在行末应有一个冒号，且后面另起的一行代码应该缩进，至于其他行的代码则根据其是否属于for循环体来确定是否缩进。</p>          </div><h3 id="动手试一试-2"><a href="#动手试一试-2" class="headerlink" title="动手试一试"></a>动手试一试</h3><p>&emsp;&emsp;<strong>4-1.披萨：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#code01</span></span><br><span class="line">pizzas = [<span class="string">'Durian'</span>,<span class="string">'Ham'</span>,<span class="string">'Chicken'</span>,<span class="string">'Bacon'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">print(pizza)</span><br><span class="line"><span class="comment">#print('I like'+ pizza + 'pizza') </span></span><br><span class="line">print(<span class="string">"I really love pizza!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#code02</span></span><br><span class="line">pizzas = [<span class="string">'Durian'</span>,<span class="string">'Ham'</span>,<span class="string">'Chicken'</span>,<span class="string">'Bacon'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line"><span class="comment">#print('I like'+ pizza + 'pizza') </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#code03</span></span><br><span class="line">pizzas = [<span class="string">'Durian'</span>,<span class="string">'Ham'</span>,<span class="string">'Chicken'</span>,<span class="string">'Bacon'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">print(pizza)</span><br><span class="line">print(<span class="string">'I like'</span>+ pizza + <span class="string">'pizza'</span>) </span><br><span class="line">print(<span class="string">"I really love pizza!"</span>)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong>4-2.动物：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#code01</span></span><br><span class="line">birds = [<span class="string">'sparrow'</span>,<span class="string">'swallow'</span>,<span class="string">'egret'</span>,<span class="string">'myna'</span>]</span><br><span class="line"><span class="keyword">for</span> bird <span class="keyword">in</span> birds:</span><br><span class="line">print(bird)</span><br><span class="line"></span><br><span class="line"><span class="comment">#code02</span></span><br><span class="line">birds = [<span class="string">'sparrow'</span>,<span class="string">'swallow'</span>,<span class="string">'egret'</span>,<span class="string">'myna'</span>]</span><br><span class="line"><span class="keyword">for</span> bird <span class="keyword">in</span> birds:</span><br><span class="line">print(bird)</span><br><span class="line">print(<span class="string">"The"</span> + bird + <span class="string">"is one of the important birds."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#code03</span></span><br><span class="line">birds = [<span class="string">'sparrow'</span>,<span class="string">'swallow'</span>,<span class="string">'egret'</span>,<span class="string">'myna'</span>]</span><br><span class="line"><span class="keyword">for</span> bird <span class="keyword">in</span> birds:</span><br><span class="line">print(bird)</span><br><span class="line">print(<span class="string">"The"</span> + bird + <span class="string">"is one of the important birds."</span>)</span><br><span class="line">print(<span class="string">"Any bird can make its own unique sound!"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><p>&emsp;&emsp;列表天生适合用来存放数字集合，python中就提供了丰富的工具让我们来高效地处理数字列表，那么首先让我们来创建一个数字列表。</p><div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">生成数字列表</a></li><li class="tab"><a href="#first-unique-name-2">列表的统计计算</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><ul><li>range()：函数range()能够被用来打印一定范围内的数字，但请注意数字的起止范围(<span class="label success">即range(1,5)将打印数字1,2,3,4</span>)  </li><li>通过list()函数我们可以将range()函数产生的数字转换为列表，像下面这样：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">print(number)</span><br></pre></td></tr></table></figure></li><li>range()函数中允许我们创建指定步长的数集(即等差数列)，只需要再传入一个步长参数即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = list(range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line">print(even_numbers)</span><br><span class="line">``` </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 计算数字的平方值 --&gt;</span><br><span class="line">python中用两个**来表示数值的乘方运算</span><br><span class="line">```python</span><br><span class="line"> squares = [] </span><br><span class="line"> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>): </span><br><span class="line">     square = value**<span class="number">2</span> </span><br><span class="line">     squares.append(square) </span><br><span class="line"> print(squares)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-unique-name-2"><ul><li>min()：找出列表的最小值</li><li>max()：找出列表的最大值</li><li>sum()：对列表中的数字求和</li></ul></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是《python编程·从入门到实践》一书的读书笔记，从这里开始了解关于python的基础知识，当然这也将是一份复习回顾的好材料…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://ManKeepUP.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://ManKeepUP.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2月22日作业</title>
    <link href="https://mankeepup.github.io/2020/02/22/Rainman-Homework/0222-02-%E7%8E%8B%E5%85%83%E7%81%BF(%E4%BD%9C%E4%B8%9A-%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8)/"/>
    <id>https://mankeepup.github.io/2020/02/22/Rainman-Homework/0222-02-%E7%8E%8B%E5%85%83%E7%81%BF(%E4%BD%9C%E4%B8%9A-%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8)/</id>
    <published>2020-02-22T01:57:00.000Z</published>
    <updated>2020-02-22T14:11:26.320Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录了关于如何“操作列表”的内容…</p><a id="more"></a><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><p>&emsp;&emsp;下面将尝试来对列表中的元素执行一些操作。</p><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><p>&emsp;&emsp;通过for循环语句来帮助我们遍历一个列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#magicians.py</span></span><br><span class="line">magicians = [<span class="string">'dengzihao'</span>,<span class="string">'bailu'</span>,<span class="string">'wangyuancan'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">print(magicians)</span><br></pre></td></tr></table></figure></p><blockquote><p>我们可以在for循环体中执行更多的语句，for语句后面且属于循环组成部分的代码行应该缩进，那些没有保持缩进的代码将不被认为在for循环体内。</p></blockquote><div class="note warning">            <p>for语句所在行末应有一个冒号，且后面另起的一行代码应该缩进，至于其他行的代码则根据其是否属于for循环体来确定是否缩进。</p>          </div><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><p>&emsp;&emsp;<strong>4-1.披萨：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#code01</span></span><br><span class="line">pizzas = [<span class="string">'Durian'</span>,<span class="string">'Ham'</span>,<span class="string">'Chicken'</span>,<span class="string">'Bacon'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">print(pizza)</span><br><span class="line"><span class="comment">#print('I like'+ pizza + 'pizza') </span></span><br><span class="line">print(<span class="string">"I really love pizza!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#code02</span></span><br><span class="line">pizzas = [<span class="string">'Durian'</span>,<span class="string">'Ham'</span>,<span class="string">'Chicken'</span>,<span class="string">'Bacon'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line"><span class="comment">#print('I like'+ pizza + 'pizza') </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#code03</span></span><br><span class="line">pizzas = [<span class="string">'Durian'</span>,<span class="string">'Ham'</span>,<span class="string">'Chicken'</span>,<span class="string">'Bacon'</span>]</span><br><span class="line"><span class="keyword">for</span> pizza <span class="keyword">in</span> pizzas:</span><br><span class="line">print(pizza)</span><br><span class="line">print(<span class="string">'I like'</span>+ pizza + <span class="string">'pizza'</span>) </span><br><span class="line">print(<span class="string">"I really love pizza!"</span>)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong>4-2.动物：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#code01</span></span><br><span class="line">birds = [<span class="string">'sparrow'</span>,<span class="string">'swallow'</span>,<span class="string">'egret'</span>,<span class="string">'myna'</span>]</span><br><span class="line"><span class="keyword">for</span> bird <span class="keyword">in</span> birds:</span><br><span class="line">print(bird)</span><br><span class="line"></span><br><span class="line"><span class="comment">#code02</span></span><br><span class="line">birds = [<span class="string">'sparrow'</span>,<span class="string">'swallow'</span>,<span class="string">'egret'</span>,<span class="string">'myna'</span>]</span><br><span class="line"><span class="keyword">for</span> bird <span class="keyword">in</span> birds:</span><br><span class="line">print(bird)</span><br><span class="line">print(<span class="string">"The"</span> + bird + <span class="string">"is one of the important birds."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#code03</span></span><br><span class="line">birds = [<span class="string">'sparrow'</span>,<span class="string">'swallow'</span>,<span class="string">'egret'</span>,<span class="string">'myna'</span>]</span><br><span class="line"><span class="keyword">for</span> bird <span class="keyword">in</span> birds:</span><br><span class="line">print(bird)</span><br><span class="line">print(<span class="string">"The"</span> + bird + <span class="string">"is one of the important birds."</span>)</span><br><span class="line">print(<span class="string">"Any bird can make its own unique sound!"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><p>&emsp;&emsp;列表天生适合用来存放数字集合，python中就提供了丰富的工具让我们来高效地处理数字列表，那么首先让我们来创建一个数字列表。</p><div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">生成数字列表</a></li><li class="tab"><a href="#first-unique-name-2">列表的统计计算</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><ul><li>range()：函数range()能够被用来打印一定范围内的数字，但请注意数字的起止范围(<span class="label success">即range(1,5)将打印数字1,2,3,4</span>)  </li><li>通过list()函数我们可以将range()函数产生的数字转换为列表，像下面这样：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">print(number)</span><br></pre></td></tr></table></figure></li><li>range()函数中允许我们创建指定步长的数集(即等差数列)，只需要再传入一个步长参数即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = list(range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line">print(even_numbers)</span><br><span class="line">``` </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 计算数字的平方值 --&gt;</span><br><span class="line">python中用两个**来表示数值的乘方运算</span><br><span class="line">```python</span><br><span class="line"> squares = [] </span><br><span class="line"> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>): </span><br><span class="line">     square = value**<span class="number">2</span> </span><br><span class="line">     squares.append(square) </span><br><span class="line"> print(squares)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-unique-name-2"><ul><li>min()：找出列表的最小值</li><li>max()：找出列表的最大值</li><li>sum()：对列表中的数字求和</li></ul></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录了关于如何“操作列表”的内容…&lt;/p&gt;
    
    </summary>
    
    
      <category term="作业" scheme="https://ManKeepUP.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="Python" scheme="https://ManKeepUP.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2月21日作业</title>
    <link href="https://mankeepup.github.io/2020/02/21/Rainman-Homework/0221-02-%E7%8E%8B%E5%85%83%E7%81%BF(%E4%BD%9C%E4%B8%9A-python%E5%88%97%E8%A1%A8)/"/>
    <id>https://mankeepup.github.io/2020/02/21/Rainman-Homework/0221-02-%E7%8E%8B%E5%85%83%E7%81%BF(%E4%BD%9C%E4%B8%9A-python%E5%88%97%E8%A1%A8)/</id>
    <published>2020-02-21T12:08:00.000Z</published>
    <updated>2020-02-22T08:40:56.772Z</updated>
    
    <content type="html"><![CDATA[<p>从这里了解python的列表…</p><a id="more"></a><h1 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h1><h2 id="3-1"><a href="#3-1" class="headerlink" title="3-1"></a>3-1</h2><div class="note info">            <p><strong>姓名：</strong>将一些朋友的姓名存储在一个列表中，并将其命名为 names。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来。</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Dengzihao'</span>,<span class="string">'Bailu'</span>,<span class="string">'Wangyuancan'</span>,<span class="string">'Dengbiao'</span>]</span><br><span class="line">print(names[<span class="number">0</span>])</span><br><span class="line">print(names[<span class="number">1</span>])</span><br><span class="line">print(names[<span class="number">-2</span>])</span><br><span class="line">print(names[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h2 id="3-2"><a href="#3-2" class="headerlink" title="3-2"></a>3-2</h2><div class="note info">            <p><strong>问候语：</strong>：继续使用练习 3-1 中的列表，但不打印每个朋友的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，但抬头为相应朋友的姓名。 </p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Dengzihao'</span>,<span class="string">'Bailu'</span>,<span class="string">'Wangyuancan'</span>,<span class="string">'Dengbiao'</span>]</span><br><span class="line">message = names[<span class="number">0</span>].title()+<span class="string">","</span>+<span class="string">"How about going?"</span></span><br><span class="line">print(message)</span><br><span class="line">message = names[<span class="number">1</span>].title()+<span class="string">","</span>+<span class="string">"How about going?"</span></span><br><span class="line">print(message)</span><br><span class="line">message = names[<span class="number">2</span>].title()+<span class="string">","</span>+<span class="string">"How about going?"</span></span><br><span class="line">print(message)</span><br><span class="line">message = names[<span class="number">3</span>].title()+<span class="string">","</span>+<span class="string">"How about going?"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><h2 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h2><div class="note info">            <p><strong>自己的列表：</strong>：想想你喜欢的通勤方式，如骑摩托车或开汽车，并创建一个包含多种通勤方式的列表。根据该列表打印一系列有关这些通勤方式的宣言，如“I would like to own a Honda motorcycle” </p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vehicles = [<span class="string">'bicycle'</span>,<span class="string">'Tricycle'</span>,<span class="string">'Motorcycle'</span>,<span class="string">'Sedan'</span>]</span><br><span class="line"></span><br><span class="line">declaration = <span class="string">"I want to own a"</span> + vehicles[<span class="number">-1</span>].title()</span><br><span class="line">print(declaration)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从这里了解python的列表…&lt;/p&gt;
    
    </summary>
    
    
      <category term="作业" scheme="https://ManKeepUP.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="Python" scheme="https://ManKeepUP.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JDBC基础</title>
    <link href="https://mankeepup.github.io/2020/02/14/Computer%20Language/Java/JDBC%E5%9F%BA%E7%A1%80/"/>
    <id>https://mankeepup.github.io/2020/02/14/Computer%20Language/Java/JDBC%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-13T16:00:00.000Z</published>
    <updated>2020-02-22T09:02:27.171Z</updated>
    
    <content type="html"><![CDATA[<p>从这里开始了解JDBC…</p><a id="more"></a><div class="note primary">            <p>笔记的相关内容来自于B站的<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NTkyNjM4NjAvP3NwbV9pZF9mcm9tPTMzMy43ODguYl82MzZmNmQ2ZDY1NmU3NC4zNA==" title="https://www.bilibili.com/video/av59263860/?spm_id_from=333.788.b_636f6d6d656e74.34">JDBC教程<i class="fa fa-external-link"></i></span></p>          </div><h1 id="1-JDBC是什么？"><a href="#1-JDBC是什么？" class="headerlink" title="1. JDBC是什么？"></a>1. JDBC是什么？</h1><p>&emsp;&emsp;JDBC全称Java DataBase Connectivity(即Java语言连接数据库)。JDBC的本质是SUN公司制定的一套接口(interface)，JDBC属于<mark>java.sql.*;</mark>这个软件包下还有很多其他接口。每一个接口都有<mark>调用者和实现者</mark>。面向接口调用，面向接口写实现类，这些都属于面向接口编程。<br><div class="note info">            <p>为什么要面向接口编程？</p>          </div></p><blockquote><p><strong>解耦合</strong>：降低程序的耦合度，提高程序的扩展力；</p></blockquote><div class="note info">            <p>多态机制</p>          </div>  <p>&emsp;&emsp;多态机制就是非常典型的面向抽象编程，举例如下，其中Animal是抽象类，而Dog和Cat是具体的对象，由Animal这个抽象的父类可以衍生出各种不同形态的子类(对象)，于是，“多态”的概念可以窥见一斑；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建议：  </span></span><br><span class="line"> Animal a = <span class="keyword">new</span> Cat();  </span><br><span class="line"> Animal d = <span class="keyword">new</span> Dog();</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Animal a)</span><span class="comment">//(面向父类型编程)  </span></span></span><br><span class="line"><span class="function">     </span></span><br><span class="line"><span class="function"><span class="comment">//不建议：  </span></span></span><br><span class="line"><span class="function"> Dog d </span>= <span class="keyword">new</span> Dog();  </span><br><span class="line"> Cat t = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><div class="note info">            <p>为什么SUN公司要指定一套JDBC接口？</p>          </div><p>&emsp;&emsp;因为每一个数据库的底层实现原理都不同，如Orcal,MySQL,MS Sqlsever等数据库都有自己的实现原理，我们可以通过接口调用任何一个数据库，而不用关心接口底下的实现方式。因此，SUN公司定义好这样一个连接数据的接口后，大大减小了程序员的工作量。</p><h1 id="2-模拟JDBC本质"><a href="#2-模拟JDBC本质" class="headerlink" title="2. 模拟JDBC本质"></a>2. 模拟JDBC本质</h1><p>&emsp;&emsp;下面来模拟一下JDBC的本质，下面是一张描绘JDBC接口与它的实现者，调用者之间关系的图片:<img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWSiiJvxqm9kxubDGKe4cz5v.xYV*l5HU5oFmwy6zWLR*seL33VClngKsqUygDIiG825HNsJpdTwmZ8.uWyntiHg!/b&amp;bo=.wUIAwAAAAADB9c!&amp;rf=viewer_4" alt="Fig.JDBC"><br>&emsp;&emsp;模拟的过程如下：SUN公司定义了一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyLyVFNiVBOCVBMSVFNiU4QiU5RkpEQkMlRTYlOUMlQUMlRTglQjQlQTgvSmF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/%E6%A8%A1%E6%8B%9FJDBC%E6%9C%AC%E8%B4%A8/Java">JDBC<i class="fa fa-external-link"></i></span>的接口,于是各大数据库厂家纷纷开始对这个接口进行实现(<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyLyVFNiVBOCVBMSVFNiU4QiU5RkpEQkMlRTYlOUMlQUMlRTglQjQlQTgvTXlTUUwuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/%E6%A8%A1%E6%8B%9FJDBC%E6%9C%AC%E8%B4%A8/MySQL.java">MySQL<i class="fa fa-external-link"></i></span>,<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyLyVFNiVBOCVBMSVFNiU4QiU5RkpEQkMlRTYlOUMlQUMlRTglQjQlQTgvT3JhY2xlLmphdmE=" title="https://github.com/ManKeepUP/Code/blob/master/%E6%A8%A1%E6%8B%9FJDBC%E6%9C%AC%E8%B4%A8/Oracle.java">Oracle<i class="fa fa-external-link"></i></span>,<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyLyVFNiVBOCVBMSVFNiU4QiU5RkpEQkMlRTYlOUMlQUMlRTglQjQlQTgvU3Fsc2VydmVyLmphdmE=" title="https://github.com/ManKeepUP/Code/blob/master/%E6%A8%A1%E6%8B%9FJDBC%E6%9C%AC%E8%B4%A8/Sqlserver.java">Sqlserver<i class="fa fa-external-link"></i></span>)，因此，不同的数据库底层的实现原理不尽相同。作为<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyLyVFNiVBOCVBMSVFNiU4QiU5RkpEQkMlRTYlOUMlQUMlRTglQjQlQTgvSmF2YVByb2dyYW1tZXIuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/%E6%A8%A1%E6%8B%9FJDBC%E6%9C%AC%E8%B4%A8/JavaProgrammer.java">Java程序员<i class="fa fa-external-link"></i></span>来说，却不需要关心这些实现细节，只需要调用数据库厂家已经实现好的接口即可，这大大缩短了开发周期。</p><blockquote><p>代码的进一步优化是利用反射机制创建对象，通过<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyLyVFNiVBOCVBMSVFNiU4QiU5RkpEQkMlRTYlOUMlQUMlRTglQjQlQTgvamRiYy5wcm9wZXJ0aWVz" title="https://github.com/ManKeepUP/Code/blob/master/%E6%A8%A1%E6%8B%9FJDBC%E6%9C%AC%E8%B4%A8/jdbc.properties">配置文件<i class="fa fa-external-link"></i></span>来实现对不同种类的数据库调用，而Java代码不用再作任何修改。</p></blockquote><h1 id="3-开发前的准备"><a href="#3-开发前的准备" class="headerlink" title="3. 开发前的准备"></a>3. 开发前的准备</h1><p>&emsp;&emsp;JDBC开发前的准备工作：需要先从官网上下载对应的jar包，然后将其配置到环境变量classpath当中。classpath是环境变量，若没有可以新建一个，具体方式如下：<br><div class="note warning">            <p>请注意路径前面的.;不能漏，.表示是当前路径</p>          </div><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath=.;D:\Java\JDBC\resources\mysql-connector-java-5.1.48\mysql-connector-java-5.1.48-bin.jar</span><br></pre></td></tr></table></figure></p><blockquote><p>以上关于JDBC的配置是针对于文本编辑器的方式开发，使用IDEA工具的时候，不需要配置以上的环境变量，IDEA有自己的配置方式。</p></blockquote><h1 id="4-JDBC编程六步"><a href="#4-JDBC编程六步" class="headerlink" title="4. JDBC编程六步"></a>4. JDBC编程六步</h1><h2 id="4-1-编程六步详情"><a href="#4-1-编程六步详情" class="headerlink" title="4.1 编程六步详情"></a>4.1 编程六步详情</h2><ul><li>第一步：注册驱动（作用：告诉Java程序，即将要连接的是哪个品牌的数据库）</li><li>第二步：获取连接（作用：表示JVM的进程和数据库进程之间的通道打开了，这属于进程之间的通信，是重量级的，使用完之后一定要关闭通道）</li><li>第三步：获取数据库操作对象（作用：专门执行sql语句的对象）</li><li>第四步：执行SQL语句（作用：DQL,DML…）</li><li>第五步：处理查询结果集（作用：只有当第四步执行的是select语句时，才有这一步处理查询结果集）</li><li>第六步：释放资源（作用：使用完资源之后一定要关闭资源，java和数据库数据进程间的通信，开启之后一定要关闭）</li><li></li></ul><h2 id="4-2-JDBC编程实例"><a href="#4-2-JDBC编程实例" class="headerlink" title="4.2 JDBC编程实例"></a>4.2 JDBC编程实例</h2><h3 id="4-2-1-六步规范代码"><a href="#4-2-1-六步规范代码" class="headerlink" title="4.2.1 六步规范代码"></a>4.2.1 六步规范代码</h3><p>&emsp;&emsp;下面是一段实例代码，展示了上述六个步骤的代码实现过程，点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyL0pEQkNUZXN0MDEuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/JDBCTest01.java">JDBCTest01.java<i class="fa fa-external-link"></i></span>去看看吧~</p><h3 id="4-2-2-实现delete-update"><a href="#4-2-2-实现delete-update" class="headerlink" title="4.2.2 实现delete,update"></a>4.2.2 实现delete,update</h3><p>&emsp;&emsp;下面是实现删除(delete)和更新(update)数据库的代码，点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyL0pEQkNUZXN0MDIuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/JDBCTest02.java">JDBCTest02.java<i class="fa fa-external-link"></i></span>查看~</p><h3 id="4-2-3-注册驱动优化"><a href="#4-2-3-注册驱动优化" class="headerlink" title="4.2.3 注册驱动优化"></a>4.2.3 注册驱动优化</h3><p>&emsp;&emsp;我们对JDBC六步中的“注册驱动”这一步进行优化，优化后的代码是一种更为常用的写法，点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyL0pEQkNUZXN0MDMuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/JDBCTest03.java">JDBCTest03<i class="fa fa-external-link"></i></span>查看~</p><h3 id="4-2-4-将数据库信息写到配置文件"><a href="#4-2-4-将数据库信息写到配置文件" class="headerlink" title="4.2.4 将数据库信息写到配置文件"></a>4.2.4 将数据库信息写到配置文件</h3><p>&emsp;&emsp;将数据库信息写到配置文件中，能够优化我们的项目代码，点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyL0pEQkNUZXN0MDQuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/JDBCTest04.java">JDBCTest04<i class="fa fa-external-link"></i></span>可查看~</p><h3 id="4-2-5-处理查询结果集"><a href="#4-2-5-处理查询结果集" class="headerlink" title="4.2.5 处理查询结果集"></a>4.2.5 处理查询结果集</h3><p>&emsp;&emsp;当使用select语句时，我们要用查询结果集中的get方法来获取数据中的内容，用rs.next()方法来移动光标，见下图：<img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWYBaXKrJ5rgrkzw49OWXj.Kz52tgDTHBQ6iAbd0gvBcLpGoVoEU.kuCHWUlKPGiwExyrrMP7sQw4IanEWQjk4WU!/b&amp;bo=.wUIAwAAAAADB9c!&amp;rf=viewer_4" alt="Fig.遍历结果集">点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hbktlZXBVUC9Db2RlL2Jsb2IvbWFzdGVyL0pEQkNUZXN0MDUuamF2YQ==" title="https://github.com/ManKeepUP/Code/blob/master/JDBCTest05.java">JDBCTest05<i class="fa fa-external-link"></i></span>查看本实例的代码吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从这里开始了解JDBC…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java&#39;s Everything" scheme="https://ManKeepUP.github.io/categories/Java-s-Everything/"/>
    
    
      <category term="JDBC" scheme="https://ManKeepUP.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Java环境</title>
    <link href="https://mankeepup.github.io/2020/02/14/Computer%20Language/Java/Java%E7%8E%AF%E5%A2%83/"/>
    <id>https://mankeepup.github.io/2020/02/14/Computer%20Language/Java/Java%E7%8E%AF%E5%A2%83/</id>
    <published>2020-02-13T16:00:00.000Z</published>
    <updated>2020-02-22T09:02:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>Java开发环境的搭建过程…</p><a id="more"></a><p>&emsp;&emsp;从上一次用Java开发2048游戏到现在已经过去了将近3年多的时间，这期间几乎很少有再接触过Java任何相关的知识，今天，重新拾起它，仍然是一件振奋人心的事情。</p><h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h1><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java开发环境的搭建过程…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java&#39;s Everything" scheme="https://ManKeepUP.github.io/categories/Java-s-Everything/"/>
    
    
      <category term="Java环境搭建" scheme="https://ManKeepUP.github.io/tags/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>2月20日作业</title>
    <link href="https://mankeepup.github.io/2020/02/13/Rainman-Homework/0220-02-%E7%8E%8B%E5%85%83%E7%81%BF(%E4%BD%9C%E4%B8%9A-python%E5%8F%98%E9%87%8F-%E7%AE%80%E5%8D%95%E6%95%B0)/"/>
    <id>https://mankeepup.github.io/2020/02/13/Rainman-Homework/0220-02-%E7%8E%8B%E5%85%83%E7%81%BF(%E4%BD%9C%E4%B8%9A-python%E5%8F%98%E9%87%8F-%E7%AE%80%E5%8D%95%E6%95%B0)/</id>
    <published>2020-02-13T12:32:00.000Z</published>
    <updated>2020-02-21T10:37:30.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>嘿！璐哥，你慢点看，今天毕设开题报告催稿，写了好久时间，作业写了一丢丢，内容还在持续编辑中，来我的新博客站<a href="https://mankeepup.github.io/造作呀！">https://mankeepup.github.io/造作呀！</a></strong></p></blockquote><a id="more"></a><div class="note primary">            <p>经过一些折腾，我的个人博客站已经基本搭建完毕(基于Hexo,github，采用NexT主题)，作业和日报将发布在博客的相应归档文件夹中，<a href="https://mankeepup.github.io/">ManKeepUP</a>期待你的访问。</p>          </div><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><blockquote><p>下面的内容是《笨方法学Python》一书中的相关习题，本次作业一共有12道题，让我们一起来看看吧~</p></blockquote><h2 id="习题0：准备工作"><a href="#习题0：准备工作" class="headerlink" title="习题0：准备工作"></a>习题0：准备工作</h2><h3 id="Gedit安装"><a href="#Gedit安装" class="headerlink" title="Gedit安装"></a>Gedit安装</h3><p>&emsp;&emsp;首先，让我们来安装gedit这个工具，点击书本中提供的下载链接<span class="exturl" data-url="aHR0cDovL2xlYXJucHl0aG9udGhlaGFyZHdheS5vcmcvZXhlcmNpc2UwLmh0bWw=" title="http://learnpythonthehardway.org/exercise0.html">gedit-download<i class="fa fa-external-link"></i></span>似乎跳转到了一个404的页面，没有关系，我们同样可以在gedit的官方网站来下载它，点击<span class="exturl" data-url="aHR0cHM6Ly9nZWRpdC5lbi5zb2Z0b25pYy5jb20v" title="https://gedit.en.softonic.com/">gedit for windows<i class="fa fa-external-link"></i></span>下载吧~<br>&emsp;&emsp;如果已经下载好了，下一步书中想让我们对这个软件的一些“愚蠢”的默认设置做一些修改，这一步非常简单，我们先从软件的“首选项”进入设置页面：<br><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWdIl5scIJcBJeqh8Be6at81GWOd5DbcK.NCIJVo*smaI7O7g6bZzkcAlDXSGQktXLuny8j2xP6z0UfatpDrjtXk!/b&amp;bo=LwOZAgAAAAADB5U!&amp;rf=viewer_4" alt="Fig.首选项"><br>然后分别按下图中的两个页面作相应的设置：<br><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWYd9ibeNrhGnfr61uC3WcCWjtWEgEOSmfOEZp5.t03sN1Quu0J99kjqUjXnWz8*JlvG0iH71BNBITU4doRH3mzE!/b&amp;bo=lwFqAgAAAAADF8w!&amp;rf=viewer_4" alt="Fig.查看">  </p><p><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWTr15oSzvTzZxKzWX0JwgSAnmgnLMmCByuQPBDDuzzZtvIMO.IWG*Uf2FMWFN4dfUDWPdOeCN65*bIIWF9Dj6zA!/b&amp;bo=lwFqAgAAAAADF8w!&amp;rf=viewer_4" alt="Fig.编辑器"></p><h3 id="开始使用Python"><a href="#开始使用Python" class="headerlink" title="开始使用Python"></a>开始使用Python</h3><p>&emsp;&emsp;由于在之前我们已经做过python2和python3共存的实验，现在我们的电脑中同时安装了两个不同的python版本，通过输入不同的命令可以启动相应版本的python终端。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//启动python2版本输入指令</span><br><span class="line">python2</span><br><span class="line">//启动python3版本输入指令</span><br><span class="line">python3</span><br></pre></td></tr></table></figure><br>接下来我们要做的事情主要和文件、目录的创建有关，并且我们要在python的终端下用指令来进入一个目录，看看这个目录下面有什么。一开始，我们使用指令(如下所示)来创建一个“mystuff”文件夹，然后用gedit编辑器新建一个文件(命名为file1),将它保存在mystuff目录下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">"mystuff"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>注意需要导入os模块，这是一个包含普遍的操作系统功能的模块  </p></blockquote><ul><li>查看当前路径  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure></li><li>切换至mystuff目录  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">"mystuff"</span>)</span><br></pre></td></tr></table></figure></li><li>查看当前目录下的文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir(<span class="string">'./'</span>)</span><br></pre></td></tr></table></figure>整个过程如下所示<img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWc5SF4W1J1*B2rewfGnP*XWGWvuTsqg88inZdeQbMoyAiAkbfbRcS4dLHcvJlGrezAjVsG*dtq8PzaEAWjLFI8g!/b&amp;bo=BAQSAQAAAAADBzE!&amp;rf=viewer_4" alt="Fig.python使用"><div class="note info">            <p>windows系统在不同应用中切换使用快捷键：alt+tab或者win+tab;退出python用ctrl+Z</p>          </div></li></ul><h2 id="习题1：第一个程序"><a href="#习题1：第一个程序" class="headerlink" title="习题1：第一个程序"></a>习题1：第一个程序</h2><h3 id="运行python程序"><a href="#运行python程序" class="headerlink" title="运行python程序"></a>运行python程序</h3><p>&emsp;&emsp;好的，第一个习题已经顺利完成了，现在我们来看看第二个习题，它试图让我们学会运行一个python程序，并告诉我们python程序是以.py结尾的。不过这一点我们早就已经知道了，不是吗？<br><div class="note warning">            <p>在正式进入下面的内容之前，让我们来记录一个问题：如何切换windows的默认python版本？<br>通过查资料可以知道，只需要在电脑-属性-高级系统设置-环境变量，然后在系统变量找到Path将你想要设为默认python版本的位置前移即可。但是这一步好像并不起效，python的默认版本始终为3.7。因此下面的一些实验也将在python3而非书本中的python2版本下进行，你有必要回头再来解决这个问题。</p>          </div><br>&emsp;&emsp;接下来我们在gedit编辑器中编写好第一个python文件“ex1.py”，在文件所在的当前路径下用下面的命令来执行它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ex1.py</span><br></pre></td></tr></table></figure><br>运行程序后，我们顺利地看到了合理的运行结果：<br><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWSeBzlCTegEiDycTPSyRRmS.2MjOXhjXZX4N6sGFwYA4UeypDCWowQQKJa3opBUuc6A04hgUFPRWJMntF44qCVU!/b&amp;bo=rwHaAAAAAAADB1Y!&amp;rf=viewer_4" alt="Fig.ex1"></p><h3 id="加分题"><a href="#加分题" class="headerlink" title="加分题"></a>加分题</h3><p>最后，请重视每一小节的加分习题，它将帮助我们更加地深入了解python。<br><div class="note info">            <p>1.让你的脚本多打印一行<br>2.让脚本只打印一行<br>3.在一行的起始位置放一个‘#’(octothorpe)符号。它的作用是什么？自己研究一下。</p>          </div>  </p><ul><li>打印一行需要一个print()语句，那么通过增加一条print()就可实现脚本多打印一行，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在你需要增加的位置输入下面的代码：</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWbUGqYXeqLZFh9C3d34nVuoE*sWQNlukuMwLzAIW8Nnnsk**pulZhaPb5BwDvPmv6HGM7WkHTMwIwhvymnpz4Vk!/b&amp;bo=BwKOAQAAAAADB6g!&amp;rf=viewer_4" alt="Fig.增加打印行数"></p><ul><li>print函数默认是换行的，因此我们在屏幕上看到每用一次print()语句，它就在新的一行开始打印，如果不想换行应该写成print(<em>*</em>,end=””)，从括号内的逗号开始是你需要添加的内容。通过修改后，不管程序中有多少个print()语句，最终脚本都只输出一行内容。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改后的脚本</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello World!"</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello Again"</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"I like typing this."</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"This is fun."</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Yay！ Printing.'</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"I'd much rather you 'not'."</span>,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'I "said" do not touch this.'</span>,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWXFZX54ZB6x3q97uSGuvbWtk14w4zSTYSuOqZF79PIm6Y3IT5TXnXG0lkynNh79wJJ4I2l5C8*OIXVKYwd2YHak!/b&amp;bo=vAQ6AAAAAAADF7A!&amp;rf=viewer_4" alt="Fig.只打印一行"></li><li>如果在每一行的开头添加一个’#’号，发现这一行代码的颜色发生变化，并且最后不会打印出来，因为它被注释了<br><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWe310czms9vof2nlLJRecuOKln2BibFc4nehkAXRBBUm42RHyE5nS5J.fU0NELBwVpBsjd4C5.NNAO6UFQhy0Mw!/b&amp;bo=DQKVAQAAAAADF6k!&amp;rf=viewer_4" alt="Fig.注释代码"><br><img src="http://m.qpic.cn/psc?/V12EJyj53W0gCd/lpoTnOcKgshCRzVbSpUVWWybOXH4JG1hP0ttBuEtHAFcOtLXVU362*Jqqis1jbyBbRhcvj0g8QFbKPYcqqUO3IIwuMTsXXmXqwEQT7De2zc!/b&amp;bo=PAJ8AQAAAAADF3E!&amp;rf=viewer_4" alt="Fig.注释代码"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;嘿！璐哥，你慢点看，今天毕设开题报告催稿，写了好久时间，作业写了一丢丢，内容还在持续编辑中，来我的新博客站&lt;a href=&quot;https://mankeepup.github.io/造作呀！&quot;&gt;https://mankeepup.github.io/造作呀！&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="作业" scheme="https://ManKeepUP.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="Python" scheme="https://ManKeepUP.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2月13日-日报</title>
    <link href="https://mankeepup.github.io/2020/02/13/Rainman-Daily-Report/%E9%9B%A8%E4%BA%BA-%E6%97%A5%E6%8A%A5/"/>
    <id>https://mankeepup.github.io/2020/02/13/Rainman-Daily-Report/%E9%9B%A8%E4%BA%BA-%E6%97%A5%E6%8A%A5/</id>
    <published>2020-02-13T12:30:00.000Z</published>
    <updated>2020-02-15T08:59:55.886Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="日报" scheme="https://ManKeepUP.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>ManKeepUP-BLOG始末</title>
    <link href="https://mankeepup.github.io/2020/02/09/ManKeepUP-BLOG%E5%A7%8B%E6%9C%AB/"/>
    <id>https://mankeepup.github.io/2020/02/09/ManKeepUP-BLOG%E5%A7%8B%E6%9C%AB/</id>
    <published>2020-02-09T09:40:59.000Z</published>
    <updated>2020-02-22T08:40:56.777Z</updated>
    
    <content type="html"><![CDATA[<p>关于博客的一切…</p><a id="more"></a><h1 id="来了老弟"><a href="#来了老弟" class="headerlink" title="来了老弟"></a>来了老弟</h1><p>&emsp;&emsp;出于不满足，我一直在思考如何让自己的博客像浏览过的一些优秀“博客”站一样,温暖丰富，充实强大，重要的是能够进行高度定制化，将博客打造成自己的互联网“小窝”。(For Example:<span class="exturl" data-url="aHR0cHM6Ly9iZXN0enVvLmNuLw==" title="https://bestzuo.cn/">Sanarous<i class="fa fa-external-link"></i></span>)偶然中的必然，当下我正处于“无脑大学生”的状态，看到了hexo,hugo等一些部署静态网站的工具，但我几乎没有区分这些工具之间不同，选择hexo是因为自己使用过github，而它是用github pages来做的，所以相对熟悉一些，而选择NexT主题是因为学的那个教程里用的这个，而我当时试了另外一个主题好像没有成功，就这样，hexo+NexT的个人定制化博客的路程开始了！(AoLiGei~)  </p><h1 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h1><p>新建一篇文章：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyZXcyMzMvaGV4by1nZW5lcmF0b3ItcmFuZG9t" title="https://github.com/Drew233/hexo-generator-random">https://github.com/Drew233/hexo-generator-random<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于博客的一切…&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Blog" scheme="https://ManKeepUP.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Markdown用法</title>
    <link href="https://mankeepup.github.io/2020/02/08/Markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://mankeepup.github.io/2020/02/08/Markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2020-02-08T04:26:50.000Z</published>
    <updated>2020-02-22T09:00:40.294Z</updated>
    
    <content type="html"><![CDATA[<p>从这里快速入手Markdown…</p><a id="more"></a><div class="note primary">            <p>欢迎阅读！Markdown同Next主题一样——强大高效，简单干净。本文将梳理Markdown中常见的语法，让你迅速用Markdown进行创作。Let’s Go!</p>          </div><h1 id="Markdown使用手册"><a href="#Markdown使用手册" class="headerlink" title="Markdown使用手册"></a>Markdown使用手册</h1><h2 id="Markdown样式"><a href="#Markdown样式" class="headerlink" title="Markdown样式"></a>Markdown样式</h2><h2 id="代码块设置"><a href="#代码块设置" class="headerlink" title="代码块设置"></a>代码块设置</h2><p>&emsp;&emsp;想在文件中嵌入代码，只需要用三个‘`’符号(位于tab键上方)一上一下将代码包含在内，你可以在‘```’符号后再做进一步的设置，如language,url,title等等。   </p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="用Mermaid画图"><a href="#用Mermaid画图" class="headerlink" title="用Mermaid画图"></a>用Mermaid画图</h3><p>&emsp;&emsp;NexT允许用户通过代码来绘制多种图形(如甘特图、流图、类图、顺序图等)，在NexT主题中集成了Mermaid插件，使用它时需要我们在_config.yml文件设置为true。如果是刚开始接触，我们可以在github的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21lcm1haWQtanMvbWVybWFpZA==" title="https://github.com/mermaid-js/mermaid">mermaid<i class="fa fa-external-link"></i></span>仓库上在线画图，学习它的用法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line">mermaid:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  theme: default</span><br></pre></td></tr></table></figure></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>&emsp;&emsp;如果想要插入一张图片，那么可以这么做：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果是网上的图片</span></span><br><span class="line">![你给图片取的名字](图片地址链接)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从这里快速入手Markdown…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://ManKeepUP.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://ManKeepUP.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
